--- C:/Users/TORCHL~1/AppData/Local/Temp/ClientManagerPlayer.cpp-rev217.svn000.tmp.cpp	Mi Mrz 16 18:47:22 2016
+++ C:/Users/TORCHL~1/AppData/Local/Temp/ClientManagerPlayer.cpp-rev228.svn000.tmp.cpp	Mo Mai 23 20:40:55 2016
@@ -8,6 +8,7 @@
 #include "ItemAwardManager.h"
 #include "HB.h"
 #include "Cache.h"
+#include "../../common/length.h"
 
 extern bool g_bHotBackup;
 
@@ -74,6 +75,24 @@ bool CreateItemTableFromRes(MYSQL_RES * res, std::
 	return true;
 }
 
+bool CreateSkillColorTableFromRes(MYSQL_RES * res, DWORD * dwSkillColor)
+{
+	if (mysql_num_rows(res) == 0)	// 데이터 없음
+		return false;
+
+	MYSQL_ROW row = mysql_fetch_row(res);
+
+	for (int x = 0; x < ESkillColorLength::MAX_SKILL_COUNT; ++x)
+	{
+		for (int i = 0; i < ESkillColorLength::MAX_EFFECT_COUNT; ++i)
+		{
+			*(dwSkillColor++) = atoi(row[i + (x*ESkillColorLength::MAX_EFFECT_COUNT)]);
+		}
+	}
+
+	return true;
+}
+
 size_t CreatePlayerSaveQuery(char * pszQuery, size_t querySize, TPlayerTable * pkTab)
 {
 	size_t queryLen;
@@ -204,6 +223,28 @@ void CClientManager::PutPlayerCache(TPlayerTable *
 	c->Put(pNew);
 }
 
+void CClientManager::QUERY_SKILL_COLOR_LOAD(CPeer * peer, DWORD dwHandle, TPlayerLoadPacket * packet)
+{
+	CSKillColorCache * c;
+	TSkillColor * p;
+	if (c = GetSkillColorCache(packet->player_id))
+	{
+		p = c->Get();
+		peer->EncodeHeader(HEADER_DG_SKILL_COLOR_LOAD, dwHandle, sizeof(p->dwSkillColor));
+		peer->Encode(p->dwSkillColor, sizeof(p->dwSkillColor));
+	}
+	else
+	{
+		char szQuery[1024];
+		snprintf(szQuery, sizeof(szQuery),
+			"SELECT s1_col1,s1_col2,s1_col3,s1_col4,s1_col5,s2_col1,s2_col2,s2_col3,s2_col4,s2_col5,"
+			"s3_col1,s3_col2,s3_col3,s3_col4,s3_col5,s4_col1,s4_col2,s4_col3,s4_col4,s4_col5,"
+			"s5_col1,s5_col2,s5_col3,s5_col4,s5_col5,s6_col1,s6_col2,s6_col3,s6_col4,s6_col5 FROM skill_color%s WHERE player_id=%d",
+			GetTablePostfix(), packet->player_id);
+		CDBManager::instance().ReturnQuery(szQuery, QID_SKILL_COLOR, peer->GetHandle(), new ClientHandleInfo(dwHandle, packet->player_id));
+	}
+}
+
 /*
  * PLAYER LOAD
  */
@@ -568,6 +609,12 @@ void CClientManager::RESULT_COMPOSITE_PLAYER(CPeer
 			RESULT_ITEM_LOAD(peer, pSQLResult, info->dwHandle, info->player_id);
 			break;
 
+			
+		case QID_SKILL_COLOR:
+			sys_log(0, "QID_SKILL_COLOR %u  %u", info->dwHandle, info->player_id);
+			RESULT_SKILL_COLOR_LOAD(peer, pSQLResult, info->dwHandle);
+			break;
+		
 		case QID_QUEST:
 			{
 				sys_log(0, "QID_QUEST %u", info->dwHandle);
@@ -693,6 +740,17 @@ void CClientManager::RESULT_ITEM_LOAD(CPeer * peer
 	}
 }
 
+void CClientManager::RESULT_SKILL_COLOR_LOAD(CPeer * peer, MYSQL_RES * pRes, DWORD dwHandle)
+{
+	DWORD dwSkillColor[ESkillColorLength::MAX_SKILL_COUNT][ESkillColorLength::MAX_EFFECT_COUNT];
+	memset(dwSkillColor, 0, sizeof(dwSkillColor));
+
+	CreateSkillColorTableFromRes(pRes, *dwSkillColor);
+	sys_log(0, "okokokn %i, %i, %i, %i,", dwSkillColor[0][0], dwSkillColor[1][1], dwSkillColor[2][2], dwSkillColor[3][3]);
+	peer->EncodeHeader(HEADER_DG_SKILL_COLOR_LOAD, dwHandle, sizeof(dwSkillColor));
+	peer->Encode(&dwSkillColor, sizeof(dwSkillColor));
+}
+
 // @fixme402 (RESULT_AFFECT_LOAD +dwRealPID)
 void CClientManager::RESULT_AFFECT_LOAD(CPeer * peer, MYSQL_RES * pRes, DWORD dwHandle, DWORD dwRealPID)
 {
